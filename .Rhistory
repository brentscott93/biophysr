break.time.by = 150,
fun = 'event',
legend.labs = c('WT-1stControl',
'WT-2ndControl',
'WT-15mM',
'WT-30mM',
'S217A-1stControl',
'S217A-2ndControl',
'S217A-15mM',
'S217A-30mM')
#fun = 'event'
)
m.labs <- c('WT', 'S217A')
names(m.labs) <- c('0', '1')
ggevent2 <- ggevent$plot +
facet_wrap(~myo01,
labeller = labeller(myo01 = m.labs))+
theme(panel.grid = element_blank(),
legend.title = element_blank())
ggevent2
fit
survdiff(Surv(time_on_ms) ~ myo + pi, data = df)
survdiff(Surv(time_on_ms) ~ myo + phosphate, data = df)
cox <- coxph(Surv(time_on_ms) ~ myo + phospahte, data = df)
cox <- coxph(Surv(time_on_ms) ~ myo + phosphate, data = df)
summary(cox)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
ef <- list.files('/Users/brentscott/Box Sync/Muscle Biophysics Lab/Data/biophysr/bscott/trap/project_myoV-phosphate',
recursive = T,
full.names = T,
pattern = 'event-frequency.csv')
directions <- list_files(trap_selected_project,
pattern = "directions.csv",
recursive = TRUE)
read_exported_directions <- bind_rows(map(directions$path, read_csv)) %>%
# mutate(grouped_file = raw_data_paths$path) %>%
filter(report == "success") %>%
mutate(ef_path = ef) %>%
rename(quality_control = `Quality Control`) %>%
filter(quality_control == TRUE)
read_exported_directions <- bind_rows(map(directions$path, read_csv))
View(read_exported_directions)
directions <- list_files('/Users/brentscott/Box Sync/Muscle Biophysics Lab/Data/biophysr/bscott/trap/project_myoV-phosphate',
pattern = "directions.csv",
recursive = TRUE)
read_exported_directions <- bind_rows(map(directions$path, read_csv))
read_exported_directions <- bind_rows(map(directions$path, read_csv)) %>%
# mutate(grouped_file = raw_data_paths$path) %>%
filter(report == "success") %>%
mutate(ef_path = ef) %>%
rename(quality_control = `Quality Control`) %>%
filter(quality_control == TRUE)
ef_files <- bind_rows(map(read_exported_directions$ef_path, read_csv))
ef_df <- do.call('rbind', map(read_exported_directions$ef_path, read_csv))
head(ef_df)
ggplot(data = ef_df)+
geom_histogram(aes(x = freq, y = stat(identity), fill = conditions),
color = 'black',
binwidth = 1)+
facet_wrap(~conditions)+
theme_classic()
ggplot(data = ef_df)+
geom_histogram(aes(x = freq, y = stat(density), fill = conditions),
color = 'black',
binwidth = 1)+
facet_wrap(~conditions)+
theme_classic()
ggplot(data = ef_df)+
geom_histogram(aes(x = freq, fill = conditions),
color = 'black',
binwidth = 1)+
facet_wrap(~conditions)+
theme_classic()
ggplot(data = ef_df)+
geom_histogram(aes(x = freq, y = stat(density), fill = conditions),
color = 'black',
binwidth = 1)+
facet_wrap(~conditions)+
theme_classic()
ef <- list.files('/Users/brentscott/Box Sync/Muscle Biophysics Lab/Data/biophysr/bscott/trap/project_myoV-phosphate',
recursive = T,
full.names = T,
pattern = 'event-frequency.csv')
directions <- list_files('/Users/brentscott/Box Sync/Muscle Biophysics Lab/Data/biophysr/bscott/trap/project_myoV-phosphate',
pattern = "directions.csv",
recursive = TRUE)
read_exported_directions <- bind_rows(map(directions$path, read_csv)) %>%
# mutate(grouped_file = raw_data_paths$path) %>%
filter(report == "success") %>%
mutate(ef_path = ef) %>%
rename(quality_control = `Quality Control`) %>%
filter(quality_control == TRUE)
ef_df <- do.call('rbind', map(read_exported_directions$ef_path, read_csv))
ggplot(data = ef_df)+
geom_histogram(aes(x = freq, y = stat(density), fill = conditions),
color = 'black',
binwidth = 1)+
facet_wrap(~conditions)+
theme_classic()
ef_df$conditions <- factor(ef_df$conditions,
levels = c("myoV-WT_pH7.0_1stControl",
"myoV-WT_pH7.0_2ndcontrol",
"myoV-WT_pH7.0_15mM-Pi",
"myoV-WT_pH7.0_30mM-Pi",
"myoV-S217A_pH7.0_1stControl",
"myoV-S217A_pH7.0_2ndControl",
"myoV-S217A_pH7.0_15mM-Pi",
"myoV-S217A_pH7.0_30mM-Pi"))
ggplot(data = ef_df)+
geom_histogram(aes(x = freq, y = stat(density), fill = conditions),
color = 'black',
binwidth = 1)+
facet_wrap(~conditions)+
theme_classic()
blu <- brewer.pal(n = 9, "Blues")[c(5, 6, 7, 8)]
red <- brewer.pal(n = 9, "Reds")[c(5, 6, 7, 8)]
ggplot(data = ef_df)+
geom_histogram(aes(x = freq, y = stat(density), fill = conditions),
color = 'black',
binwidth = 1)+
facet_wrap(~conditions)+
scale_fill_manual(values = colors)+
theme_classic()
blu <- brewer.pal(n = 9, "Blues")[c(5, 6, 7, 8)]
red <- brewer.pal(n = 9, "Reds")[c(5, 6, 7, 8)]
colors <- c(blu, red)
ggplot(data = ef_df)+
geom_histogram(aes(x = freq, y = stat(density), fill = conditions),
color = 'black',
binwidth = 1)+
facet_wrap(~conditions)+
scale_fill_manual(values = colors)+
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(biophysr)
library(RColorBrewer)
ggplot(data = ef_df)+
geom_density(aes(x = freq),
color = 'black',
binwidth = 1)+
facet_wrap(~conditions)+
scale_fill_manual(values = colors)+
theme_classic()
library(biophysr)
library(aomisc)
library(drc)
library(tidyverse)
library(magrittr)
library(gt)
library(RColorBrewer)
library(plotrix)
library(plotly)
library(broom)
library(cowplot)
trap_selected_project <- "/Users/brentscott/Box Sync/Muscle Biophysics Lab/Data/biophysr/bscott/trap/project_myoV-phosphate"
directions <- list_files(trap_selected_project,
pattern = "directions.csv",
recursive = TRUE)
event_p <- list_files(trap_selected_project,
pattern = "measured-events.csv",
recursive = TRUE)
raw_data_paths <- list_files(trap_selected_project,
pattern = "grouped",
recursive = TRUE)
read_exported_directions <- bind_rows(map(directions$path, read_csv)) %>%
mutate(grouped_file = raw_data_paths$path) %>%
filter(report == "success") %>%
mutate(event_paths = event_p$path) %>%
rename(quality_control = `Quality Control`) %>%
filter(quality_control == TRUE) %>%
mutate(split = event_paths) %>%
separate(split, c('nada', 'u', 'b', 'box', 'mbl', 'b2', 'data', 'me', 'trap', 'project', 'conditions', 'date', 'res', 'e', 'filename'), sep = '/')
all_hmm_events <- suppressMessages(map(read_exported_directions$event_paths, read_csv, col_names = TRUE))
# for(s in 1:nrow(read_exported_directions)){
#   all_hmm_events[[s]] <- cbind(all_hmm_events[[s]], read_exported_directions$conditions[[s]])
# }
event_files_filtered <- do.call('rbind', all_hmm_events) %>%
mutate(conditions2 = conditions) %>%
separate(conditions2, c("myo", "ph", "phosphate"), sep = "_")
#####summarise
#####summarise
#all_grouped <- suppressMessages(map(read_exported_directions$grouped_file, read_tsv, col_names = FALSE))
all_grouped <- list()
for(g in 1:nrow(read_exported_directions)){
if(str_sub(read_exported_directions$grouped_file[[g]], -3) == 'txt'){
all_grouped[[g]] <- read_tsv(read_exported_directions$grouped_file[[g]], col_names = c('bead', 'trap'))
} else {
all_grouped[[g]] <- read_csv(read_exported_directions$grouped_file[[g]], col_names = TRUE)
}
all_grouped[[g]] <- cbind(all_grouped[[g]], read_exported_directions$conditions[[g]])
}
all_grouped <- bind_rows(all_grouped) %>%
rename(conditions = 'read_exported_directions$conditions[[g]]') %>%
mutate(conditions = as.character(conditions))
get_time <- all_grouped %>%
dplyr::group_by(conditions) %>%
dplyr::summarize(minutes = round((length(bead)/5000)/60, 2))# %>%
# separate(conditions, c("myo", "ph", "phosphate"), sep = "_")
# num_events <- event_files_filtered %>%
#   group_by(conditions) %>%
#   count()
summarize_trap <- event_files_filtered %>%
dplyr::group_by(conditions) %>%
dplyr::summarize(time_on_avg = mean(time_on_ms),
time_on_se = std.error(time_on_ms, na.rm = TRUE),
time_off_avg = mean(time_off_ms, na.rm = TRUE),
time_off_se = std.error(time_off_ms, na.rm = TRUE),
displacement_avg = mean(displacement_nm, na.rm = TRUE),
displacement_se = std.error(displacement_nm, na.rm = TRUE),
force_avg = mean(force, na.rm = TRUE),
force_se = std.error(force, na.rm = TRUE),
num_events = n()) %>%
right_join(get_time)
summarize_trap$conditions <- factor(summarize_trap$conditions,
levels = c("myoV-WT_pH7.0_1stControl",
"myoV-WT_pH7.0_2ndcontrol",
"myoV-WT_pH7.0_15mM-Pi",
"myoV-WT_pH7.0_30mM-Pi",
"myoV-S217A_pH7.0_1stControl",
"myoV-S217A_pH7.0_2ndControl",
"myoV-S217A_pH7.0_15mM-Pi",
"myoV-S217A_pH7.0_30mM-Pi"))
summarize_trap %>%
arrange(conditions) %>%
separate(conditions, c("Myosin", "pH", "Pi"), sep = "_") %>%
select(Myosin,
Pi,
"Step Size (nm)" = displacement_avg,
"Force (pN)" = force_avg,
"Time On (ms)" = time_on_avg,
"Time Off (ms)" = time_off_avg,
"No. Events" = num_events,
"Minutes Collected" = minutes
) %>%
mutate_if(is.numeric, ~round(.,digits = 2)) %>%
gt() %>%
tab_header(
title = "Myosin-V Phosphate",
subtitle = "Project Summary"
) %>%
tab_spanner(label = "Conditions", columns = vars(Myosin, Pi), gather = TRUE) %>%
tab_style(
style = cell_fill(color = "blue", alpha = 0.25),
locations = cells_body(
rows = Myosin == 'myoV-WT')
) %>%
tab_style(
style = list(
cell_fill(color = "red", alpha = 0.25)
),
locations = cells_body(
rows = Myosin == 'myoV-S217A')
)
# event_files_filtered %<>% separate("conditions", c("myosin", "pH", "pi"), sep = "_")
event_files_filtered$conditions <- factor(event_files_filtered$conditions,
levels = c("myoV-WT_pH7.0_1stControl",
"myoV-WT_pH7.0_2ndcontrol",
"myoV-WT_pH7.0_15mM-Pi",
"myoV-WT_pH7.0_30mM-Pi",
"myoV-S217A_pH7.0_1stControl",
"myoV-S217A_pH7.0_2ndControl",
"myoV-S217A_pH7.0_15mM-Pi",
"myoV-S217A_pH7.0_30mM-Pi"))
blu <- brewer.pal(n = 9, "Blues")[c(5, 6, 7, 8)]
red <- brewer.pal(n = 9, "Reds")[c(5, 6, 7, 8)]
colors <- c(blu, red)
step_histo <- ggplot(data = event_files_filtered,
aes(x = displacement_nm,
fill = conditions))+
geom_histogram(aes(y = stat(density)),
binwidth = 2,
color = "black")+
facet_wrap(~conditions)+
xlab("Step Size (nm)")+
scale_y_continuous(expand = c(0,0))+
scale_x_continuous(breaks = seq(-40, 40, by = 5))+
scale_fill_manual(values = colors)+
#scale_fill_brewer(palette = "Dark2")+
theme_linedraw()+
theme(panel.grid = element_blank(),
legend.position = "none")+
ggtitle("Step Size Distributions")
ggplotly(step_histo)
time_on_histo <- ggplot(data = event_files_filtered,
aes(x = time_on_ms,
fill = conditions))+
geom_histogram(aes(y = stat(density)),
binwidth = 15,
color = "black")+
facet_wrap(~conditions)+
xlab("Time on (ms)")+
scale_y_continuous(expand = c(0,0))+
scale_x_continuous(breaks = seq(0, 6000, by = 100))+
scale_fill_manual(values = colors)+
#scale_fill_brewer(palette = "Dark2")+
theme_linedraw()+
theme(panel.grid = element_blank(),
legend.position = "none")+
ggtitle("Time On Distributions")
ggplotly(time_on_histo)
time_off_histo <- ggplot(data = event_files_filtered,
aes(x = time_off_ms,
fill = conditions))+
geom_histogram(aes(y = stat(density)),
binwidth = 100,
color = "black")+
facet_wrap(~conditions)+
xlab("Time off (ms)")+
scale_y_continuous(expand = c(0,0))+
scale_x_continuous(breaks = seq(0, 20000, by = 500))+
scale_fill_manual(values = colors)+
#scale_fill_brewer(palette = "Dark2")+
theme_linedraw()+
theme(panel.grid = element_blank(),
legend.position = "none")+
ggtitle("Time Off Distributions")
ggplotly(time_off_histo)
force_histo <- ggplot(data = event_files_filtered,
aes(x = force,
fill = conditions))+
geom_histogram(aes(y = stat(density)),
binwidth = 0.1,
color = "black")+
facet_wrap(~conditions)+
xlab("Time off (ms)")+
scale_y_continuous(expand = c(0,0))+
#scale_x_continuous(breaks = seq(0, 20000, by = 500))+
scale_fill_manual(values = colors)+
#scale_fill_brewer(palette = "Dark2")+
theme_linedraw()+
theme(panel.grid = element_blank(),
legend.position = "none")+
ggtitle("Force Distributions")
ggplotly(force_histo)
arrange(summarize_trap, conditions) %>%
mutate_if(is.numeric, ~round(., digits = 2))
files <- list_files("/Users/brentscott/Box Sync/Muscle Biophysics Lab/Data/biophysr/bscott/trap/project_myoV-phosphate",
recursive = T,
pattern = "ensemble-average.csv")
read_exported_directions2 <- bind_rows(map(directions$path, read_csv)) %>%
filter(report == "success") %>%
mutate(ensemble_avg = files$path) %>%
filter(`Quality Control` == TRUE)
data <- do.call('rbind', (map(read_exported_directions2$ensemble_avg, read_csv)))
forward_avg <- data %>%
dplyr::filter(is_positive == T & direction == 'forward') %>%
group_by(conditions, ensemble_index) %>%
dplyr::summarize(avg = mean(data, na.rm = T),
n = dplyr::n()) %>%
nest(ensemble = c(ensemble_index, avg, n))
# forward_avg <- data %>%
#     dplyr::filter(is_positive == T) %>%
#     group_by(forward_index) %>%
#     summarize(avg = mean(data, na.rm = T),
#               n = dplyr::n())
forward_ensemble_avg <- function(x){
value <- dplyr::filter(x, ensemble_index == 0) %>%
pull(avg)
x %>% mutate(zero = value) %>%
dplyr::filter(ensemble_index >= 0) %>%
rownames_to_column(var = "new_x") %>%
mutate(time = as.numeric(new_x)/5000,
avg = avg - zero)
}
forward_avg %<>% mutate(event_ensemble = map(ensemble, forward_ensemble_avg),
drm = map(event_ensemble, ~drm(avg ~ time, data = .x, fct = DRC.negExp())))
forward_avg$conditions <- factor(forward_avg$conditions,
levels = c("myoV-WT_pH7.0_1stControl",
"myoV-WT_pH7.0_2ndcontrol",
"myoV-WT_pH7.0_15mM-Pi",
"myoV-WT_pH7.0_30mM-Pi",
"myoV-S217A_pH7.0_1stControl",
"myoV-S217A_pH7.0_2ndControl",
"myoV-S217A_pH7.0_15mM-Pi",
"myoV-S217A_pH7.0_30mM-Pi"))
forward_avg_unnest <- forward_avg %>%
select(-drm) %>%
unnest(event_ensemble)
#map(forward_avg$drm, summary)
# zero <- forward_avg %>%
#   filter(forward_index == 0) %>%
#   pull(avg)
# df <- filter(forward_avg, forward_index >= 0) %>%
#   rownames_to_column(var = "new_x") %>%
#   mutate(time = as.numeric(new_x)/5000,
#          avg = avg - zero)
# forward_avg_unnest$conditions <- factor(forward_avg_unnest$conditions, levels =  c("myoV-WT_pH7.0_2ndcontrol",
#                                                       "myoV-WT_pH7.0_15mMPi",
#                                                       "myoV-WT_pH7.0_30mM-Pi",
#                                                       "myoV-S217A_pH7.0_2ndControl",
#                                                       "myoV-S217A_pH7.0_15mM-Pi",
#                                                       "myoV-S217A_pH7.0_30mM-Pi"))
drm_negExp <- drm(avg ~ time, data = forward_avg_unnest, curveid = conditions,  fct = DRC.negExp())
class(drm_negExp) <- append(class(drm_negExp),"nls")
summary_ensemble <- tidy(drm_negExp)
summary_ensemble$term <- factor(summary_ensemble$term,
levels =  c("a:myoV-WT_pH7.0_1stControl",
"a:myoV-WT_pH7.0_2ndcontrol",
"a:myoV-WT_pH7.0_15mM-Pi",
"a:myoV-WT_pH7.0_30mM-Pi",
"a:myoV-S217A_pH7.0_1stControl",
"a:myoV-S217A_pH7.0_2ndControl",
"a:myoV-S217A_pH7.0_15mM-Pi",
"a:myoV-S217A_pH7.0_30mM-Pi",
"c:myoV-WT_pH7.0_1stControl",
"c:myoV-WT_pH7.0_2ndcontrol",
"c:myoV-WT_pH7.0_15mM-Pi",
"c:myoV-WT_pH7.0_30mM-Pi",
"c:myoV-S217A_pH7.0_1stControl",
"c:myoV-S217A_pH7.0_2ndControl",
"c:myoV-S217A_pH7.0_15mM-Pi",
"c:myoV-S217A_pH7.0_30mM-Pi"))
summary_ensemble %>%
arrange(term) %>%
gt() %>%
tab_style(
style = list(
cell_fill(color = "red", alpha = 0.25)
),
locations = cells_body(
rows = str_detect(term, 'myoV-S217A')
)
) %>%
tab_style(
style = list(
cell_fill(color = "blue", alpha = 0.25)
),
locations = cells_body(
rows = str_detect(term, 'WT')
)
) %>%
tab_header(
title = "Ensemble Average Fits",
subtitle = "a = asymptope, c = rate"
) %>%
tab_row_group(
group = "rate",
rows = 9:16
) %>%
tab_row_group(
group = "asymptope",
rows = 1:8
)
backwards_avg <- data %>%
dplyr::filter(is_positive == T & direction == 'backwards') %>%
group_by(conditions, ensemble_index) %>%
dplyr::summarize(avg = mean(data, na.rm = T),
n = dplyr::n()) %>%
nest(ensemble = c(ensemble_index, avg, n))
View(backwards_avg)
View(backwards_avg[[2]][[1]])
length(75:149)
plot(backwards_avg$ensemble[[1]]$ensemble_index, backwards_avg$ensemble[[1]]$avg, type = 'l')
plot(backwards_avg$ensemble[[2]]$ensemble_index, backwards_avg$ensemble[[2]]$avg, type = 'l')
plot(backwards_avg$ensemble[[3]]$ensemble_index, backwards_avg$ensemble[[3]]$avg, type = 'l')
plot(backwards_avg$ensemble[[4]]$ensemble_index, backwards_avg$ensemble[[4]]$avg, type = 'l')
plot(backwards_avg$ensemble[[5]]$ensemble_index, backwards_avg$ensemble[[5]]$avg, type = 'l')
plot(backwards_avg$ensemble[[6]]$ensemble_index, backwards_avg$ensemble[[6]]$avg, type = 'l')
plot(forward_avg$ensemble[[6]]$ensemble_index, forward_avg$ensemble[[6]]$avg, type = 'l')
plot(forward_avg$ensemble[[5]]$ensemble_index, forward_avg$ensemble[[5]]$avg, type = 'l')
plot(forward_avg$ensemble[[2]]$ensemble_index, forward_avg$ensemble[[2]]$avg, type = 'l')
plot(forward_avg$ensemble[[1]]$ensemble_index, forward_avg$ensemble[[1]]$avg, type = 'l')
plot(forward_avg$ensemble[[8]]$ensemble_index, forward_avg$ensemble[[8]]$avg, type = 'l')
plot(forward_avg$ensemble[[6]]$ensemble_index, forward_avg$ensemble[[6]]$avg, type = 'l')
plot(forward_avg$ensemble[[8]]$ensemble_index, forward_avg$ensemble[[8]]$avg, type = 'l')
plot(forward_avg$ensemble[[5]]$ensemble_index, forward_avg$ensemble[[5]]$avg, type = 'l')
plot(forward_avg$ensemble[[6]]$ensemble_index, forward_avg$ensemble[[6]]$avg, type = 'l')
plot(forward_avg$ensemble[[6]]$ensemble_index, forward_avg$ensemble[[6]]$avg)
plot(forward_avg$ensemble[[6]]$ensemble_index, forward_avg$ensemble[[6]]$avg, type = 'l')
plot(forward_avg$ensemble[[8]]$ensemble_index, forward_avg$ensemble[[8]]$avg, type = 'l')
plot(forward_avg$ensemble[[2]]$ensemble_index, forward_avg$ensemble[[2]]$avg, type = 'l')
plot(forward_avg$ensemble[[3]]$ensemble_index, forward_avg$ensemble[[3]]$avg, type = 'l')
plot(forward_avg$ensemble[[5]]$ensemble_index, forward_avg$ensemble[[5]]$avg, type = 'l')
ggplot(forward_avg)+
geom_line(aes(x = ensemble_index, y = avg))+
facet_wrap(~conditions)+
theme_classic()
ggplot(forward_avg$ensemble)+
geom_line(aes(x = ensemble_index, y = avg))+
facet_wrap(~conditions)+
theme_classic()
ggggggg <- function(x){
ggplot(x)+
geom_line(aes(x = ensemble_index, y = avg))+
facet_wrap(~conditions)+
theme_classic()
}
gplots <- map(forward_avg$ensemble, ggggggg)
plot_list(gplots)
cowplot::plot_list(gplots)
gridExtra::plot_list(gplots)
cowplot:::plot_grid(gplots)
View(gplots)
ggggggg <- function(x){
ggplot(x)+
geom_line(aes(x = ensemble_index, y = avg))+
theme_classic()
}
gplots <- map(forward_avg$ensemble, ggggggg)
cowplot:::plot_grid(gplots)
cowplot:::plot_grid(plotlist = gplots)
ggsave('~/Desktop/ensemble-avg.png')
ggsave('~/Desktop/ensemble-avg.png', width = 10)
ggggggg <- function(x){
ggplot(x)+
geom_point(aes(x = ensemble_index, y = avg))+
theme_classic()
}
gplots <- map(forward_avg$ensemble, ggggggg)
cowplot:::plot_grid(plotlist = gplots)
