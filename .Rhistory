peak_displacement_df <- peak_displacement_df %>%
rename(displacement_nm = run_mean)%>%
mutate(converted_force = displacement_nm*nm2pn)
##### COMBINE ALL EVENT DATA ####
final_events <-  rescaled_events %>%
mutate(off_time_prior_dp = c(NA, off_time_index$off_time_dp),
off_time_prior_sec = off_time_prior_dp/5000,
time_off_prior_ms = off_time_prior_sec*1000,
raw_event_duration_dp = state_2_end - state_1_end,
raw_event_duration_sec = raw_event_duration_dp/5000,
time_on_ms = raw_event_duration_sec * 1000,
displacement_nm = peak_displacement_df$displacement_nm,
conditions = read_directions$condition[[folder]],
observation = read_directions$folder[[folder]],
event_num = 1:nrow(rescaled_events),
force = peak_displacement_df$converted_force)%>%
dplyr::select(event_num, conditions, observation, time_on_ms, time_off_prior_ms, displacement_nm, force)
final_events_4_plot <-  rescaled_events %>%
mutate(off_time_prior_dp = c(NA, off_time_index$off_time_dp),
off_time_prior_sec = off_time_prior_dp/5000,
time_off_prior_ms = off_time_prior_sec*1000,
raw_event_duration_dp = state_2_end - state_1_end,
raw_event_duration_sec = raw_event_duration_dp/5000,
time_on_ms = raw_event_duration_sec * 1000,
peak_nm = peak_displacement_df$displacement_nm,
conditions = read_directions$condition[[folder]],
observation = read_directions$folder[[folder]],
event_num = 1:nrow(rescaled_events),
force = peak_displacement_df$converted_force,
peak_nm_index = peak_displacement_df$index)%>%
rename(end_s1 = state_1_end,
end_s2 = state_2_end)
final_event_list[[folder]] <- final_events
dygraph_final_event[[folder]] <- final_events_4_plot
writeLines(paste("Identified", nrow(final_events), "events in", length(dat)/5000, "seconds"))
#svalue(sb) <- paste("Identified", nrow(final_events), "events in", length(dat)/5000, "seconds")
#plot
#writeLines("Plotting...")
filter_final_events1 <- filter(final_events_4_plot, end_s2 < 20000)
filter_final_events2 <- filter(final_events_4_plot, end_s2 > 20000 & end_s2 < 40000)
filter_final_events3 <- filter(final_events_4_plot, end_s2 > max(final_events_4_plot$end_s2) - 40000 & end_s2 < max(final_events_4_plot$end_s2) - 20000)
filter_final_events4 <- filter(final_events_4_plot, end_s2 > max(final_events_4_plot$end_s2) - 20000)
run_mean_rescaled0 <- ifelse(run_mean_rescaled$run_mean < 0 , 0, run_mean_rescaled$run_mean)
dygraph_run_mean[[folder]] <- run_mean_rescaled0
if(length(dat) > 100001){
#1
p1 <- ggplot()+
geom_line(aes(x = 1:20000, y = rescaled_raw_data$trap[1: 20000 ]))+
geom_line(aes(x = 1: 20000, y = run_mean_rescaled0[1:20000]),color = run_mean_color)+
geom_line(aes(x = 1:20000, y = rep(8, 20000)), color = "gray50")+
geom_point(aes(x = filter_final_events1$peak_nm_index, y = filter_final_events1$peak_nm), color = "gold")+
geom_point(aes(x = filter_final_events1$end_s1, y = run_mean_rescaled0[filter_final_events1$end_s1]), color = "green", shape = 17, size = 2)+
geom_point(aes(x = filter_final_events1$end_s2, y = run_mean_rescaled0[filter_final_events1$end_s2]), color = "red", shape = 4)+
theme_bw()+
ggtitle(paste0(read_directions$condition[[folder]], "_", read_directions$folder[[folder]]))+
ylab("Discplacement (nm)")+
xlab("")
#2
p2 <- ggplot()+
geom_line(aes(x = 20001:40000, y = rescaled_raw_data$trap[20001: 40000 ]))+
geom_line(aes(x = 20001: 40000, y = run_mean_rescaled0[20001:40000]),color = run_mean_color)+
geom_line(aes(x = 20001:40000, y = rep(8, 20000)), color = "gray50")+
geom_point(aes(x = filter_final_events2$peak_nm_index, y = filter_final_events2$peak_nm), color = "gold")+
geom_point(aes(x = filter_final_events2$end_s1, y = run_mean_rescaled0[filter_final_events2$end_s1]), color = "green", shape = 17, size = 2)+
geom_point(aes(x = filter_final_events2$end_s2, y = run_mean_rescaled0[filter_final_events2$end_s2]), color = "red", shape = 4)+
theme_bw()+
ylab("Discplacement (nm)")+
xlab("")
#3
p3 <- ggplot()+
geom_line(aes(x = (max(final_events_4_plot$end_s2) - 40000):max(final_events_4_plot$end_s2 - 20000), y = rescaled_raw_data$trap[(max(final_events_4_plot$end_s2) - 40000): (max(final_events_4_plot$end_s2) - 20000)]))+
geom_line(aes(x = (max(final_events_4_plot$end_s2) - 40000):max(final_events_4_plot$end_s2 - 20000), y = run_mean_rescaled0[(max(final_events_4_plot$end_s2) - 40000): (max(final_events_4_plot$end_s2)- 20000)]), color = run_mean_color)+
geom_line(aes(x = (max(final_events_4_plot$end_s2) - 40000):max(final_events_4_plot$end_s2 - 20000), y = rep(8, 20001)), color = "grey50")+
geom_point(aes(x = filter_final_events3$peak_nm_index, y = filter_final_events3$peak_nm), color = "gold")+
geom_point(aes(x = filter_final_events3$end_s1, y = run_mean_rescaled0[filter_final_events3$end_s1]), color = "green", shape = 17, size = 2)+
geom_point(aes(x = filter_final_events3$end_s2, y = run_mean_rescaled0[filter_final_events3$end_s2]), color = "red", shape = 4)+
theme_bw()+
ylab("Discplacement (nm)")+
xlab("")
#4
p4 <- ggplot()+
geom_line(aes(x = (max(final_events_4_plot$end_s2) - 20000):max(final_events_4_plot$end_s2), y = rescaled_raw_data$trap[(max(final_events_4_plot$end_s2) - 20000):max(final_events_4_plot$end_s2)]))+
geom_line(aes(x = (max(final_events_4_plot$end_s2) - 20000):max(final_events_4_plot$end_s2), y = run_mean_rescaled0[(max(final_events_4_plot$end_s2) - 20000):max(final_events_4_plot$end_s2)]),color = run_mean_color)+
geom_line(aes(x = (max(final_events_4_plot$end_s2) - 20000):max(final_events_4_plot$end_s2), y = rep(8, 20001)), color = "grey50")+
geom_point(aes(x = filter_final_events4$peak_nm_index, y = filter_final_events4$peak_nm), color = "gold")+
geom_point(aes(x = filter_final_events4$end_s1, y = run_mean_rescaled0[filter_final_events4$end_s1]), color = "green", shape = 17, size = 2)+
geom_point(aes(x = filter_final_events4$end_s2, y = run_mean_rescaled0[filter_final_events4$end_s2]), color = "red", shape = 4)+
theme_bw()+
ylab("Discplacement (nm)")+
xlab("Time (data points)")
plots <-  arrangeGrob(p1, p2, p3, p4, ncol = 1)
plot_list[[folder]] <- plots
} else if(length(dat) < 100000){
#1
p1 <- ggplot()+
geom_line(aes(x = 1:20000, y = rescaled_raw_data$trap[1: 20000 ]))+
geom_line(aes(x = 1: 20000, y = run_mean_rescaled0[1:20000]),color = run_mean_color)+
geom_line(aes(x = 1:20000, y = rep(8, 20000)), color = "gray50")+
geom_point(aes(x = filter_final_events1$peak_nm_index, y = filter_final_events1$peak_nm), color = "gold")+
geom_point(aes(x = filter_final_events1$end_s1, y = run_mean_rescaled0[filter_final_events1$end_s1]), color = "green", shape = 17, size = 2)+
geom_point(aes(x = filter_final_events1$end_s2, y = run_mean_rescaled0[filter_final_events1$end_s2]), color = "red", shape = 4)+
theme_bw()+
ggtitle(paste0(read_directions$condition[[folder]], "_", read_directions$folder[[folder]]))+
ylab("Discplacement (nm)")+
xlab("Time (data points")
plot_list[[folder]] <- p1
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
# svalue(sb) <- "Plot Made"
}
writeLines("Saving Data")
#svalue(sb) <- "Saving Data"
for(t in seq_along(final_event_list)){
write.csv(final_event_list[[t]], file = paste0(read_directions$folder[[t]],
"/results/",
read_directions$condition[[t]],
"_",
read_directions$folder[[t]],
"_",
"mini_ensemble_events.csv"))
}
writeLines("Saving Plots")
#svalue(sb) <- "Saving Plots"
for(p in seq_along(plot_list)){
tryCatch({
# 1. Open png file
png(paste0(read_directions$folder[[p]],
"/results/",
read_directions$condition[[p]],
"_",
read_directions$folder[[p]],
"_",
"mini_plot", ".png"),
width = 12, height = 8, units = "in", res = 500)
# 2. Create the plot
plot(plot_list[[p]])
# 3. Close the file
dev.off()
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
################################ MAKE DYGRAPH ####################################
writeLines("Making Interactive Plots")
# svalue(sb) <- "Making Interactive Plots"
#save dygraph data
for(d in seq_along(dygraph_raw_data)){
tryCatch({
dygraph_master_list <- list(raw_data = dygraph_raw_data[[d]],
run_mean = dygraph_run_mean[[d]],
final_events = dygraph_final_event[[d]],
parent_dir = parent_dir)
save("dygraph_master_list", file = paste0(read_directions$folder[[d]],
"/results/",
read_directions$condition[[d]],
"_",
read_directions$folder[[d]],
"_dygraph_data.RData"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#make dygraph .R file
for(y in 1:nrow(read_directions)){
tryCatch({
writeLines(c(
"#+ echo=FALSE",
paste0("parent_dir <- ","'", parent_dir, "'"),
paste0("obs <- ", "'", read_directions$folder[[y]], "'"),
paste0("run_mean_color <- ", "'",run_mean_color, "'"),
"
#+ echo=FALSE, fig.width = 10, fig.height = 4
setwd(parent_dir)
library(tidyverse)
library(dygraphs)
library(rmarkdown)
directions <- list.files(pattern = 'directions.csv')
observation_folders <- list.files(pattern = 'obs')
read_directions <- suppressMessages(read_csv(directions)) %>%
mutate(folder = observation_folders)%>%
filter(include == 'yes')
setwd(paste0(parent_dir, '/', obs, '/results'))
dg_dat <- list.files(pattern = 'dygraph_data.RData')
load(dg_dat)
d <- data.frame(index = 1:length(dygraph_master_list$run_mean),
raw = dygraph_master_list$raw_data[1:length(dygraph_master_list$run_mean)],
run = dygraph_master_list$run_mean,
thresh = rep(8, length(dygraph_master_list$run_mean)))
events <- dygraph_master_list$final_events
periods_df <- data.frame(start = events$end_s1,
stop = events$end_s2)
add_shades <- function(x, periods, ...){
for(p in 1:nrow(periods)){
x <- dyShading(x, from = periods$start[[p]], to = periods$stop[[p]], ...)
}
x
}
add_labels <- function(x, events, ...){
for(event in 1:nrow(events)){
x <- dyEvent(x, events$peak_nm_index[[event]], paste(events$time_on_ms[[event]], 'ms,', round(events$force[[event]], digits = 2), 'pN'), ...)
}
x
}
dygraph(d) %>%
dySeries('raw', color = 'gray30', strokeWidth = 2) %>%
dySeries('run', color = run_mean_color,  strokeWidth = 2) %>%
dySeries('thresh', strokeWidth = 3, color = 'lightgrey') %>%
dyRangeSelector() %>%
add_shades(periods_df, color = 'lightpink') %>%
add_labels(events, labelLoc = 'bottom') %>%
dyAxis('x', drawGrid = FALSE) %>%
dyUnzoom()
"),
paste0(read_directions$folder[[y]],
"/results/",
read_directions$condition[[y]],
"_",
read_directions$folder[[y]],
"_dygraph.R")
)
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#render to HTML
for(r in 1:nrow(read_directions)){
tryCatch({
rmarkdown::render(paste0(parent_dir,
"/",
read_directions$folder[[r]],
"/results/",
read_directions$condition[[r]],
"_",
read_directions$folder[[r]],
"_dygraph.R"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
svalue(sb) <<- "Analysis Complete"
})
visible(window) <- TRUE
library(tidyverse)
library(biophysr)
gui()
library(biophysr)
setwd("/Users/brentscott/Desktop/r_test")
setwd("/Users/brentscott/Desktop/r_test")
f <- list.files(pattern = ".txt")
length(f[[1]])
txts <- map(f, read.delim, header = FALSE)
library(tidyverse)
txts <- map(f, read.delim, header = FALSE)
View(txts)
writeLines("Creating Observations")
wd <- getwd()
setwd(wd)
dir.create(paste0(wd, "/", "observations"))
f <- list.files(pattern = "*.txt")
txts <- map(f, read.delim, header = FALSE)
str_trap <- function(x){
substring <- str_sub(x, c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- round(as.numeric(substring[[6]])/60, digits = 2)
find_decimal <- unname(str_locate(substring[[6]], "[.]")[,1])
substring[[6]] <- str_sub(substring[[6]], start = find_decimal, end = str_length(substring[[6]]))
final_string <- as.numeric(str_c(substring, collapse = ""))
return(final_string)
}
extract_numbers <- map(f, str_trap)
View(extract_numbers)
f[[144]]
xtract <- map(f[[144]], str_trap)
View(xtract)
substring <- str_sub(f[[144]], c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- round(as.numeric(substring[[6]])/60, digits = 2)
substring <- str_sub(f[[144]], c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- substring[[6]])/60)
substring[[6]] <- substring[[6]])/60
substring[[6]] <- substring[[6]]/60
substring[[6]] <- as.numeric(substring[[6]])/60
substring <- str_sub(f[[144]], c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- round(as.numeric(substring[[6]])/60, digits = 2)
substring <- str_sub(f[[144]], c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- round(as.numeric(substring[[6]])/60, digits = 2)
if(as.numeric(substring[[6]]) == "0"){
substring[[6]] <- ".00"
} else {
find_decimal <- unname(str_locate(substring[[6]], "[.]")[,1])
substring[[6]] <- str_sub(substring[[6]], start = find_decimal, end = str_length(substring[[6]]))
}
final_string <- as.numeric(str_c(substring, collapse = ""))
final_string
substring <- str_sub(f[[145]], c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- round(as.numeric(substring[[6]])/60, digits = 2)
if(as.numeric(substring[[6]]) == "0"){
substring[[6]] <- ".00"
} else {
find_decimal <- unname(str_locate(substring[[6]], "[.]")[,1])
substring[[6]] <- str_sub(substring[[6]], start = find_decimal, end = str_length(substring[[6]]))
}
final_string2 <- as.numeric(str_c(substring, collapse = ""))
final_string2 - final_string
setwd("/Users/brentscott/Desktop/r_test")
wd <- getwd()
dir.create(paste0(wd, "/", "observations"))
f <- list.files(pattern = "*.txt")
txts <- map(f, read.delim, header = FALSE)
str_trap <- function(x){
substring <- str_sub(x, c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- round(as.numeric(substring[[6]])/60, digits = 2)
if(as.numeric(substring[[6]]) == "0"){
substring[[6]] <- ".00"
} else {
find_decimal <- unname(str_locate(substring[[6]], "[.]")[,1])
substring[[6]] <- str_sub(substring[[6]], start = find_decimal, end = str_length(substring[[6]]))
}
final_string <- as.numeric(str_c(substring, collapse = ""))
return(final_string)
}
extract_numbers <- map(f, str_trap)
View(extract_numbers)
diff_vector <- vector()
for(i in seq_along(extract_numbers[-length(extract_numbers)])){
dif <- extract_numbers[[i+1]] - extract_numbers[[i]]
#dif2[[i]] <- extract_numbers[[i+1]] - extract_numbers[[i]]
if(dif > 0.5){
diff_vector[[i]] <- "end_observation"
} else {
diff_vector[[i]] <- "observing"
}
}
diff_tibble2 <- tibble(index = 1:length(diff_vector),
observation = diff_vector)
View(diff_tibble2)
diff_tibble2$observation[[1]] <- "begin_observation"
for(x in 2:nrow(diff_tibble2)){
if(diff_tibble2$observation[[x-1]] == "end_observation"){
diff_tibble2$observation[[x]] <- "begin_observation"
}
}
View(diff_tibble2)
diff_tibble2 <- filter(diff_tibble2, observation != "observing") %>%
group_split(observation) %>%
bind_cols()
2:nrow(diff_tibble2)-1
2:(nrow(diff_tibble2)-1)
diff_tibble2$observation[[length(diff_tibble2$observation)]]
diff_tibble2$observation[[length(diff_tibble2$observation)]] <- "end_observation"
View(diff_tibble2)
diff_tibble2 <- filter(diff_tibble2, observation != "observing") %>%
group_split(observation) %>%
bind_cols()
View(diff_tibble2)
setwd("/Users/brentscott/Desktop/r_test")
f <- list.files(pattern = ".txt")
txts <- map(f, read.delim, header = FALSE)
wd <- getwd()
setwd("/Users/brentscott/Desktop/r_test")
f <- list.files(pattern = ".txt")
txts <- map(f, read.delim, header = FALSE)
wd <- getwd()
writeLines("Reading Data")
setwd(wd)
dir.create(paste0(wd, "/", "observations"))
f <- list.files(pattern = "*.txt")
txts <- map(f, read.delim, header = FALSE)
writeLines("Creating Observations")
str_trap <- function(x){
substring <- str_sub(x, c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- round(as.numeric(substring[[6]])/60, digits = 2)
if(as.numeric(substring[[6]]) == "0"){
substring[[6]] <- ".00"
} else {
find_decimal <- unname(str_locate(substring[[6]], "[.]")[,1])
substring[[6]] <- str_sub(substring[[6]], start = find_decimal, end = str_length(substring[[6]]))
}
final_string <- as.numeric(str_c(substring, collapse = ""))
return(final_string)
}
extract_numbers <- map(f, str_trap)
diff_vector <- vector()
for(i in seq_along(extract_numbers[-length(extract_numbers)])){
dif <- extract_numbers[[i+1]] - extract_numbers[[i]]
#dif2[[i]] <- extract_numbers[[i+1]] - extract_numbers[[i]]
if(dif > 0.5){
diff_vector[[i]] <- "end_observation"
} else {
diff_vector[[i]] <- "observing"
}
}
diff_vector[[length(extract_numbers)]] <- "end_observation"
diff_tibble2 <- tibble(index = 1:length(diff_vector),
observation = diff_vector)
diff_tibble2$observation[[1]] <- "begin_observation"
for(x in 2:(nrow(diff_tibble2)-1)){
if(diff_tibble2$observation[[x-1]] == "end_observation"){
diff_tibble2$observation[[x]] <- "begin_observation"
}
}
diff_tibble2$observation[[length(diff_tibble2$observation)]] <- "end_observation"
diff_tibble2 <- filter(diff_tibble2, observation != "observing") %>%
group_split(observation) %>%
bind_cols()
writeLines("Arranging Folders")
wd <- getwd()
length(extract_numbers
length(extract_numbers)
tail(diff_vector)
f <- list.files(pattern = ".txt")
txts <- map(f, read.delim, header = FALSE)
wd <- getwd()
setwd(wd)
dir.create(paste0(wd, "/", "observations"))
f <- list.files(pattern = "*.txt")
txts <- map(f, read.delim, header = FALSE)
writeLines("Creating Observations")
str_trap <- function(x){
substring <- str_sub(x, c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- round(as.numeric(substring[[6]])/60, digits = 2)
if(as.numeric(substring[[6]]) == "0"){
substring[[6]] <- ".00"
} else {
find_decimal <- unname(str_locate(substring[[6]], "[.]")[,1])
substring[[6]] <- str_sub(substring[[6]], start = find_decimal, end = str_length(substring[[6]]))
}
final_string <- as.numeric(str_c(substring, collapse = ""))
return(final_string)
}
extract_numbers <- map(f, str_trap)
library(biophysr)
setwd("/Volumes/MINI_FLASH/datp_pca7_noDrug_trap/done/txt/untitled folder/test/anothertest copy 4 - Copy copy")
f <- list.files(pattern = "*.txt")
library(tidyverse)
txtx <- map(f, read.delim, header = FALSE)
txts <- map(f, read.delim, header = FALSE)
wd <- getwd()
setwd(wd)
dir.create(paste0(wd, "/", "observations"))
str_trap <- function(x){
substring <- str_sub(x, c(6, 11, 14, 17, 20, 23), c(9, 12, 15, 18, 21, 24))
substring[[6]] <- round(as.numeric(substring[[6]])/60, digits = 2)
if(as.numeric(substring[[6]]) == "0"){
substring[[6]] <- ".00"
} else {
find_decimal <- unname(str_locate(substring[[6]], "[.]")[,1])
substring[[6]] <- str_sub(substring[[6]], start = find_decimal, end = str_length(substring[[6]]))
}
final_string <- as.numeric(str_c(substring, collapse = ""))
return(final_string)
}
extract_numbers <- purrr::map(f, str_trap)
diff_vector <- vector()
for(i in seq_along(extract_numbers[-length(extract_numbers)])){
dif <- extract_numbers[[i+1]] - extract_numbers[[i]]
#dif2[[i]] <- extract_numbers[[i+1]] - extract_numbers[[i]]
if(dif > 0.5){
diff_vector[[i]] <- "end_observation"
} else {
diff_vector[[i]] <- "observing"
}
}
diff_vector[[length(extract_numbers)]] <- "end_observation"
diff_tibble2 <- tibble(index = 1:length(diff_vector),
observation = diff_vector)
View(diff_tibble2)
diff_tibble2$observation[[1]] <- "begin_observation"
for(x in 2:(nrow(diff_tibble2)-1)){
if(diff_tibble2$observation[[x-1]] == "end_observation"){
diff_tibble2$observation[[x]] <- "begin_observation"
}
}
View(diff_tibble2)
diff_tibble2 <- filter(diff_tibble2, observation != "observing") %>%
group_split(observation) %>%
bind_cols()
View(diff_tibble2)
obs_file_names <- vector("list")
#make new folders
for(r in 1:nrow(diff_tibble2)){
if(r < 10){
dir.create(paste0(wd, "/observations/", "obs_0", r))
} else {
dir.create(paste0(wd, "/observations/","obs_", r))
}
obs_file_names[[r]] <- f[diff_tibble2$index[[r]]:diff_tibble2$index1[[r]]]
}
View(obs_file_names)
for(o in seq_along(obs_file_names)){
for(file in seq_along(obs_file_names[[o]])){
if(o < 10){
file.rename(from = paste0(wd, "/", obs_file_names[[o]][[file]]),
to = paste0(wd, "/observations/", "obs_0", o, "/", obs_file_names[[o]][[file]]))
} else {
file.rename(from = paste0(wd, "/", obs_file_names[[o]][[file]]),
to = paste0(wd, "/observations/", "obs_", o, "/", obs_file_names[[o]][[file]]))
}
}}
#create obs
create_obs <- vector("list")
for(row in 1:nrow(diff_tibble2)){
create_obs[[row]] <- dplyr::bind_rows(txts[diff_tibble2$index[[row]]:diff_tibble2$index1[[row]]])
}
View(create_obs)
writeLines("Saving Data")
for(c in seq_along(create_obs)){
if(c < 10){
write.table(create_obs[[c]],
file = paste0(wd, "/observations/", "obs_0", c, "/", "grouped.txt"),
row.names = FALSE,
col.names = FALSE,
sep = "\t")
} else {
write.table(create_obs[[c]],
file = paste0(wd, "/observations/", "obs_", c, "/", "grouped.txt"),
row.names = FALSE,
col.names = FALSE,
sep = "\t")
}
}
library(biophysr)
