library(shinydashboard)
ui <- fluidPage(
dashboardPage(
dashboardHeader(title = "DASHBOARD"),
dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one"),
menuItem("two",
menuSubItem("2.1"),
menuSubItem("2.2")
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
),
dashboardBody()
)
)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$tab == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(shinydashboard)
ui <- fluidPage(
dashboardPage(
dashboardHeader(title = "DASHBOARD"),
dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one"),
menuItem("two",
menuSubItem("2.1"),
menuSubItem("2.2")
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
),
dashboardBody()
)
)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$tab == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(shinydashboard)
ui <- fluidPage(
dashboardPage(
dashboardHeader(title = "DASHBOARD"),
dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one"),
menuItem("two",
menuSubItem("2.1"),
menuSubItem("2.2")
),
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
),
dashboardBody()
)
)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$tab == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(shinydashboard)
heder <-   dashboardHeader(title = "DASHBOARD")
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one"),
menuItem("two",
menuSubItem("2.1"),
menuSubItem("2.2")
),
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
body <- dashboardBody()
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$tab == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(shinydashboard)
header <-   dashboardHeader(title = "DASHBOARD")
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one"),
menuItem("two",
menuSubItem("2.1"),
menuSubItem("2.2")
),
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
body <- dashboardBody()
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$tab == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(shinydashboard)
header <-   dashboardHeader(title = "DASHBOARD")
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one"),
menuItem("two",
menuSubItem("2.1"),
menuSubItem("2.2")
),
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
body <- dashboardBody()
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$tab == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
header <- dashboardHeader(title = "DASHBOARD")
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one"),
menuItem("two",
menuSubItem("2.1"),
menuSubItem("2.2")
),
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two",
menuSubItem("2.1", "2.1"),
menuSubItem("2.2", "2.2")
),
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", label = "choose", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two",
menuSubItem("2.1", "2.1"),
menuSubItem("2.2", "2.2")
),
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", label = "choose", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two",
menuSubItem("sub2", "sub2"),
menuSubItem("sub22", "sub22")
),
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", label = "choose", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two"),
menuSubItem("sub2", "sub2"),
menuSubItem("sub22", "sub22")
),
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", label = "choose", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two"),
menuSubItem("sub2", "sub2"),
menuSubItem("sub22", "sub22")
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100),
)
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", label = "choose", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two"),
menuSubItem("sub2", "sub2"),
menuSubItem("sub22", "sub22")
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100)
)
library(shiny)
library(shinyjs)
library(shinydashboard)
header <- dashboardHeader(title = "DASHBOARD")
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", label = "choose", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two"),
menuSubItem("sub2", "sub2"),
menuSubItem("sub22", "sub22")
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100)
)
body <- dashboardBody()
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$tab == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(shinydashboard)
header <- dashboardHeader(title = "DASHBOARD")
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", label = "choose", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two"),
menuSubItem("sub2", "sub2"),
menuSubItem("sub22", "sub22")
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100)
)
body <- dashboardBody()
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$rb == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(shinydashboard)
header <- dashboardHeader(title = "DASHBOARD")
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", label = "choose", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two",
menuSubItem("sub2", "sub2"),
menuSubItem("sub22", "sub22"))
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100)
)
body <- dashboardBody()
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$rb == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
runApp('inst/shiny')
?radioGroupButtons
runApp('inst/shiny')
library(shiny)
library(shinyjs)
library(shinydashboard)
header <- dashboardHeader(title = "DASHBOARD")
sidebar <- dashboardSidebar(
useShinyjs(),
radioButtons(inputId = "rb", label = "choose", choices = c("menu", "sliders")),
sidebarMenu(id = "sidebar",
menuItem("one", "one"),
menuItem("two", "two",
menuSubItem("sub2", "sub2"),
menuSubItem("sub22", "sub22"))
),
sliderInput("Sample","Enter Number of Samples:",min = 1000, max = 100000,value = 10000),
sliderInput("Weight","Enter Weight:",min = 1, max = 1000,value = 100)
)
body <- dashboardBody()
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output, session){
observe({
req(!is.null(input$rb))
if(input$rb == "menu"){
show("sidebar")
hide("Sample")
hide("Weight")
}
if(input$rb == "sliders"){
hide("sidebar")
show("Sample")
show("Weight")
}
})
}
shinyApp(ui, server)
shiny::runApp('inst/shiny')
runApp('inst/shiny')
shinyWidgetsGallery()
?awesomeCheckbox
runApp('inst/shiny')
shinyWidgetsGallery()
runApp('inst/shiny')
shinyWidgetsGallery()
runApp('inst/shiny')
shinyWidgetsGallery()
runApp('inst/shiny')
shinyWidgetsGallery()
runApp('~/Documents/UMASS/Lab/R/biophysr_package/biophysr/inst/shiny')
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
shinyWidgetsGallery()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
?radioGroupButtons
runApp('inst/shiny')
shinyWidgetsGallery()
shinyWidgetsGallery()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
?textInput
runApp('inst/shiny')
runApp('inst/shiny')
?drop_dir
drop_create
?drop_create
?file
?file
?tempfile
?drop_upload
?sendSweetAlert()
write_csv(iris, "~/Desktop/iris1.csv")
write_csv(iris, "~/Desktop/iris2.csv")
write_csv(iris, "~/Desktop/iris3.csv")
iris_list <- list(iris, iris, iris)
iris_list
num <- c(1, 2, 3)
filenames <- paste0("~/Desktop/iris", num, ".csv")
filenames <- paste0("~/Desktop/iris", num, ".csv")
write.csv(iris, "~/Desktop/iris3.csv")
map2(iris, filename, write.csv)
map2(iris, filenames, write.csv)
map2(iris_list, filenames, write.csv)
#read them all in at once
iris_files <- list.files("~/Desktop", pattern = "iris")
read_iris <- map(iris_files, read.csv)
#list.files returns a character vector of all the files in a given directory see ?list.files for more info
iris_files <- list.files("~/Desktop", pattern = "iris", full.names = TRUE)
read_iris <- map(iris_files, read.csv)
View(read_iris)
#with a loop
read_iris_loop <- list()
for(i in seq_along(iris_files)){
read_iris_loop[[i]] <- read.csv(iris_files[[1]])
}
View(read_iris_loop)
