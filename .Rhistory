scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")+
annotate("text", label = paste0("p = ", round(duration_ttest$p.value, 2)), x = 1, y = 40)
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_time_off, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_time_off - ed_se,
ymax = avg_time_off + ed_se, color = ligand), width = 0.5, size = 1)+
annotate("text", label = "p < 0.00001", x = 1, y = 1000)+
ylab("Time Off (ms)")+
xlab("")+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_event_duration, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_event_duration - ed_se,
ymax = avg_event_duration + ed_se, color = ligand), width = 0.5, size = 1)+
ylab("Event Duration (ms)")+
xlab("")+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")+
annotate("text", label = paste0("p = ", round(duration_ttest$p.value, 2)), x = 1, y = 40, size = 12)
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_event_duration, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_event_duration - ed_se,
ymax = avg_event_duration + ed_se, color = ligand), width = 0.5, size = 1)+
ylab("Event Duration (ms)")+
xlab("")+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")+
annotate("text", label = paste0("p = ", round(duration_ttest$p.value, 2)), x = 1, y = 40, size = 10)
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_event_duration, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_event_duration - ed_se,
ymax = avg_event_duration + ed_se, color = ligand), width = 0.5, size = 1)+
ylab("Event Duration (ms)")+
xlab("")+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")+
annotate("text", label = paste0("p = ", round(duration_ttest$p.value, 2)), x = 1, y = 38, size = 10)
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_time_off, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_time_off - ed_se,
ymax = avg_time_off + ed_se, color = ligand), width = 0.5, size = 1)+
annotate("text", label = "p < 0.00001", x = 1, y = 1000, size = 10)+
ylab("Time Off (ms)")+
xlab("")+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_event_duration, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_event_duration - ed_se,
ymax = avg_event_duration + ed_se, color = ligand), width = 0.5, size = 1)+
ylab("Event Duration (ms)")+
xlab("")+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")+
annotate("text", label = paste0("p = ", round(duration_ttest$p.value, 2)), x = 1, y = 38, size = 10)
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_time_off, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_time_off - ed_se,
ymax = avg_time_off + ed_se, color = ligand), width = 0.5, size = 1)+
annotate("text", label = "p < 0.00001", x = 1, y = 1000, size = 10)+
ylab("Time Off (ms)")+
xlab("")+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_time_off, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_time_off - ed_se,
ymax = avg_time_off + ed_se, color = ligand), width = 0.5, size = 1)+
annotate("text", label = "p < 0.00001", x = 1, y = 1000, size = 10)+
ylab("Time Off (ms)")+
xlab("")+
scale_x_discrete(breaks = c("atp", "azo"))+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_time_off, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_time_off - ed_se,
ymax = avg_time_off + ed_se, color = ligand), width = 0.5, size = 1)+
annotate("text", label = "p < 0.00001", x = 1, y = 1000, size = 10)+
ylab("Time Off (ms)")+
xlab("")+
scale_x_discrete(labels = c("atp", "azo"))+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_time_off, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_time_off - ed_se,
ymax = avg_time_off + ed_se, color = ligand), width = 0.5, size = 1)+
annotate("text", label = "p < 0.00001", x = 1, y = 1000, size = 8)+
ylab("Time Off (ms)")+
xlab("")+
scale_x_discrete(labels = c("atp", "azo"))+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
theme_ppt()+
theme(legend.position = "none")
ggplot(data = mini_summary)+
geom_bar(aes(x = ligand, y = avg_event_duration, fill = ligand), stat = "identity")+
geom_errorbar(aes(x = ligand,
ymin = avg_event_duration - ed_se,
ymax = avg_event_duration + ed_se, color = ligand), width = 0.5, size = 1)+
ylab("Event Duration (ms)")+
xlab("")+
scale_fill_manual(values = colors)+
scale_color_manual(values = colors)+
scale_x_discrete(labels = c("atp", "azo"))+
theme_ppt()+
theme(legend.position = "none")+
annotate("text", label = paste0("p = ", round(duration_ttest$p.value, 2)), x = 1, y = 38, size = 8)
View(plot_list)
setwd("/Volumes/FLASH/azo-TP_trapping_stuff/raw_data/mini_ensemble")
# 1. Open jpeg file
png(paste0("plot_", files[[i]], "mini_ensemble.png"))
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png(paste0("plot_", i, "mini_ensemble.png"))
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
setwd("/Volumes/FLASH/azo-TP_trapping_stuff/raw_data/mini_ensemble")
for(i in seq_along(plot_list)){
plot2save <- plot(plot_list[[i]])
ggsave(paste0("plot_", i, "mini_ensemble.png"), plot2save, width = 12)
}
setwd("/Volumes/FLASH/azo-TP_trapping_stuff/raw_data/mini_ensemble")
plot2save <- plot(plot_list[[1]])
ggsave(paste0("plot_", i, "mini_ensemble.png"), plot2save, width = 12)
# 1. Open jpeg file
png("plot.png")
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png("plot.png", width = 350)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png("plot.png", width = 1000)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png("plot.png", width = 1200)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png("plot.png", width = 1200, height = 800)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png("plot.png", width = 1500, height = 1000)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
?png()
# 1. Open jpeg file
png("plot.png", width = 12, units = "cm")
# 1. Open jpeg file
png("plot.png", width = 2000, height = 1200)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png("plot.png", width = 800, height = 500)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png("plot.png", width = 1600, height = 1000)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png("plot.png", width = 5000, height = 4000)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
# 1. Open jpeg file
png("plot.png", width = 12 , height = 10, units = "in", res = 1200)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
plot2save <- plot(plot_list[[1]])
# 1. Open jpeg file
png("plot.png", width = 12, height = 8, units = "in", res = 2000)
# 2. Create the plot
plot(plot_list[[1]])
# 3. Close the file
dev.off()
files
head(files[[1]])
str(files[[1]])
substr(files[[1]], 1, 10)
substr(files[[1]], 1, nchar(files[[i]] - 4))
substr(files[[1]], 1, nchar(files[[1]] - 4))
substr(files[[1]], 1, nchar(files[[1]])- 4)
for(i in seq_along(plot_list)){
plot2save <- plot(plot_list[[i]])
# 1. Open jpeg file
png(paste0("plot_", substr(files[[i]], 1, nchar(files[[i]])- 4)), width = 12, height = 8, units = "in", res = 2000)
# 2. Create the plot
plot(plot_list[[i]])
# 3. Close the file
dev.off()
}
for(i in seq_along(plot_list)){
plot2save <- plot(plot_list[[i]])
# 1. Open jpeg file
png(paste0("plot_", substr(files[[i]], 1, 30)), width = 12, height = 8, units = "in", res = 2000)
# 2. Create the plot
plot(plot_list[[i]])
# 3. Close the file
dev.off()
}
for(i in seq_along(plot_list)){
plot2save <- plot(plot_list[[i]])
# 1. Open jpeg file
png(paste0("plot_", substr(files[[i]], 1, 20)), width = 12, height = 8, units = "in", res = 2000)
# 2. Create the plot
plot(plot_list[[i]])
# 3. Close the file
dev.off()
}
for(i in seq_along(plot_list)){
# 1. Open jpeg file
png(paste0("plot_", substr(files[[i]], 1, 20)), ".png", width = 12, height = 8, units = "in", res = 2000)
# 2. Create the plot
plot(plot_list[[i]])
# 3. Close the file
dev.off()
}
for(i in seq_along(plot_list)){
# 1. Open jpeg file
png(paste0("plot_", substr(files[[i]], 1, 20), ".png"), width = 12, height = 8, units = "in", res = 2000)
# 2. Create the plot
plot(plot_list[[i]])
# 3. Close the file
dev.off()
}
num <- seq_along(9)
seq_along(9)
num <- seq(1:9)
for(i in seq_along(plot_list)){
# 1. Open jpeg file
png(paste0("plot_",num, substr(files[[i]], 1, 20), ".png"), width = 12, height = 8, units = "in", res = 2000)
# 2. Create the plot
plot(plot_list[[i]])
# 3. Close the file
dev.off()
}
paste0("plot_",num[1], substr(files[[1]], 1, 20), ".png")
num[1]
paste0("plot_", num[1], substr(files[[1]], 1, 20), ".png")
paste0("plot_", num[1], substr(files[[1]], 1, 20), ".png")
paste0("plot_", expression(num[1]), substr(files[[1]], 1, 20), ".png")
paste0("plot_", 1, substr(files[[i]], 1, 20), ".png")
paste(num[1])
paste0(num[1])
paste0("plot_", num1, substr(files[[i]], 1, 20), ".png")
paste0("plot_", num[1], substr(files[[1]], 1, 20), ".png")
num <- as.character(seq(1:9))
paste0("plot_", num[1], substr(files[[1]], 1, 20), ".png")
paste0(num[1], "plot_", substr(files[[1]], 1, 20), ".png")
for(i in seq_along(plot_list)){
# 1. Open jpeg file
png(paste0(num[i], "plot_", substr(files[[i]], 1, 20), ".png"), width = 12, height = 8, units = "in", res = 2000)
# 2. Create the plot
plot(plot_list[[i]])
# 3. Close the file
dev.off()
}
library(biophysr)
library(biophysr)
?ensemble_average
?colnames
hmm_data <- read.csv("/Users/brentscott/Documents/UMASS/Lab/simulation/300 events, 7nmstep, 300 length, new 100319/300_event_simulation_7nm_step_300length_1_hmm_identified_event.csv")
View(hmm_data)
run_mean_state <- hmm_data %>%
select(run_mean, state)
library(tidyverse)
run_mean_state <- hmm_data %>%
select(run_mean, state)
run_var_state <- hmm_data %>%
select(run_var, state)
View(run_mean_state)
run_mean_rle <- rle(run_mean_state)
?rle
run_mean_rle <- rle(run_mean_state, run_mean_state$state)
run_mean_rle < rle(run_mean_state$state)
run_mean_rle <- rle(run_mean_state$state)
View(run_mean_rle)
#converting to a tibble
run_mean_tle_df <- as_tibble(do.call("cbind", run_length_encoding))
#converting to a tibble
run_mean_tle_df <- as_tibble(do.call("cbind", run_mean_rle))
final_data <- data.frame(new_year = c(2000, 2000, 2000, 2015, 2015 ),
tfr = c(1, 2, 3, 1, 6))
final_data[final_data$new_year == 2015]
final_data$tfr[final_data$new_year == 2015]
new_list <-vector("list")
new_list <-vector("list")
for(i in nrow(final_data)){
if(final_data$tfr[final_data$new_year == 2015, final_data$tfr > 5]){
1
} else {
0
}
}
new_list <-vector("list")
for(i in nrow(final_data)){
if(final_data$tfr[final_data$new_year == 2015 & final_data$tfr > 5]){
1
} else {
0
}
}
View(new_list)
final_data$tfr[final_data$new_year == 2015 & final_data$tfr > 5]
new_list <-vector("list")
for(i in nrow(final_data)){
if(final_data$tfr[[i]][final_data$new_year == 2015 & final_data$tfr > 5]){
new_list[[i]] <-  1
} else {
new_list[[i]] <- 0
}
}
final_data$[final_data$new_year == 2015 & final_data$tfr > 5]
final_data[final_data$new_year == 2015 & final_data$tfr > 5]
final_data[final_data$new_year == 2015 & final_data$tfr > 5,]
new_list <-vector("list")
for(i in nrow(final_data)){
if(final_data[final_data$new_year == 2015 & final_data$tfr > 5,]){
new_list[[i]] <-  1
} else {
new_list[[i]] <- 0
}
}
final_data[final_data$new_year == 2015 & final_data$tfr > 5,]
new_list <-vector("list")
for(i in nrow(final_data)){
if(final_data$tfr == [final_data$new_year == 2015 & final_data$tfr > 5,]){
new_list[[i]] <-  1
} else {
new_list[[i]] <- 0
}
}
new_list <-vector("list")
for(i in nrow(final_data)){
if(final_data$tfr == final_data$tfr[final_data$new_year == 2015 & final_data$tfr > 5]){
new_list[[i]] <-  1
} else {
new_list[[i]] <- 0
}
}
new_list <-vector("list")
for(i in nrow(final_data)){
if(final_data$tfr[[i]] == final_data$tfr[final_data$new_year == 2015 & final_data$tfr > 5]){
new_list[[i]] <-  1
} else {
new_list[[i]] <- 0
}
}
View(new_list)
final_data$tfr[final_data$new_year == 2015 & final_data$tfr > 5]
ifelse(final_data$tfr == final_data$tfr[final_data$new_year == 2015 & final_data$tfr > 5], 1, 0)
final_data <- data.frame(new_year = c(2000, 2000, 2000, 2015, 2015, 2015 ),
tfr = c(1, 2, 3, 1, 6, 7))
ifelse(final_data$tfr == final_data$tfr[final_data$new_year == 2015 & final_data$tfr > 5], 1, 0)
final_data$tfr[final_data$new_year == 2015 & final_data$tfr > 5]
ifelse(final_data == final_data$[final_data$new_year == 2015 & final_data$tfr > 5], 1, 0)
ifelse(final_data == final_data[final_data$new_year == 2015 & final_data$tfr > 5], 1, 0)
new_col <- ifelse(final_data == final_data[final_data$new_year == 2015 & final_data$tfr > 5], 1, 0)
new_col <- ifelse(final_data$tfr == final_data$tfr[final_data$new_year == 2015 & final_data$tfr > 5], 1, 0)
final_data$shape <- new_col
View(final_data)
#converting to a tibble
run_mean_tle_df <- enframe(do.call("cbind", run_mean_rle))
#converting to a tibble
run_mean_tle_df <- as_tibble(do.call("cbind", run_mean_rle))
df <- data.frame(country = c("one", "two", "three"))
df$country
df <- data.frame(country = c("one", "two", "three", "four"))
df2 <- df %>% filter(country == one | two)
df2 <- df %>% filter(country == "one" | "two")
df2 <- df %>% filter(country %in% c("one", "two")
df2 <- df %>% filter(country %in% c("one", "two"))
View(df2)
df %>% mutate("new" <- country %in% df2)
df %>% mutate("new" = country %in% df2)
df %>% mutate("new" = country %in% df2$country)
df <- data.frame(country = c("one", "two", "three", "four"))
View(df)
df <- data.frame(country = c("one", "two", "three", "four"),
year = 1,
data = 3)
View(df)
df2 <- df %>% filter(country %in% c("one", "two"))
View(df2)
df %>% mutate("new" = country %in% df2$country)
?scale_shape_manual
#converting to a tibble
run_mean_tle_df <- as_tibble(do.call("cbind", run_mean_rle))
hmm_data <- read.csv("/Users/brentscott/Documents/UMASS/Lab/simulation/300 events, 7nmstep, 300 length, new 100319/300_event_simulation_7nm_step_300length_1_hmm_identified_event.csv")
run_mean_state <- hmm_data %>%
select(run_mean, state)
run_var_state <- hmm_data %>%
select(run_var, state)
run_mean_rle <- rle(run_mean_state$state)
#converting to a tibble
run_mean_tle_df <- as_tibble(do.call("cbind", run_mean_rle))
?as_tibble
?enframe
#converting to a tibble
run_mean_tle_df <- as_tibble(do.call("cbind", run_mean_rle))
View(run_mean_tle_df)
#If the rle_object's last row is in state 1, get rid of that last row. This needs to end in state 2 to capture the end of the last event
rle_object <- if(tail(run_mean_tle_df, 1)$values == 1){
slice(run_mean_tle_df, -length(run_mean_tle_df$values))
} else {
run_mean_tle_df
}
View(rle_object)
data_split <- rle_object %>%
dplyr::mutate(cumsum = cumsum(lengths)) %>%
dplyr::group_by(values) %>%
split(rle_object$values)
#data is recmombined in a state_1 column and a state_2
#the values in these columns represent the last data point (in window lengths) in either state 1 or state 2
#So the range of values between the end of state 1 (or start of state 2) and the end of state 2 is the event duration
regroup_data <- bind_cols(state_1_end = data_split[[1]]$cumsum, state_2_end = data_split[[2]]$cumsum)
View(regroup_data)
#converting to a tibble
run_mean_rle_df <- as_tibble(do.call("cbind", run_mean_rle))
View(run_var_state)
View(run_mean_state)
View(run_mean_state)
event_vectors <- vector("list", length = nrow(regroup_data)) #allocate space for output storage of loop
for(i in seq_along(1:nrow(regroup_data))){
event_vectors[[i]] <- c(run_mean_state$run_mean[(regroup_data$state_1_end[i]+1) : (regroup_data$state_2_end[i])])
}
View(event_vectors)
forward_event_vectors <- vector("list", length = nrow(regroup_data)) #allocate space for output storage of loop
for(i in seq_along(1:nrow(regroup_data))){
event_vectors[[i]] <- c(run_mean_state$run_mean[(regroup_data$state_1_end[i]-1) : (regroup_data$state_2_end[i])])
}
View(forward_event_vectors)
forward_event_vectors <- vector("list", length = nrow(regroup_data)) #allocate space for output storage of loop
for(i in seq_along(1:nrow(regroup_data))){
event_vectors[[i]] <- c(run_mean_state$run_mean[(regroup_data$state_1_end[i]-1) : (regroup_data$state_2_end[i])])
}
View(forward_event_vectors)
forward_event_vectors <- vector("list", length = nrow(regroup_data)) #allocate space for output storage of loop
forward_event_vectors <- vector("list", length = nrow(regroup_data)) #allocate space for output storage of loop
for(i in seq_along(1:nrow(regroup_data))){
forward_event_vectors[[i]] <- c(run_mean_state$run_mean[(regroup_data$state_1_end[i] - 1) : (regroup_data$state_2_end[i])])
}
View(forward_event_vectors)
plot(forward_event_vectors[[1]])
points(forward_event_vectors[[2]])
plot(forward_event_vectors[[1]])
points(forward_event_vectors[[2]], col = "blue")
source('~/.active-rstudio-document', echo=TRUE)
points(forward_event_vectors[[3]], col = "red")
